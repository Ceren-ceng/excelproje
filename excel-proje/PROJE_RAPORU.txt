================================================================================
                    EXCEL → VERİTABANI DÖNÜŞTÜRME SİSTEMİ
                              TEKNİK RAPOR
================================================================================

📅 Rapor Tarihi: 4 Eylül 2025
👨‍💻 Geliştirici: [Ad Soyad]
🎯 Proje Türü: Full-Stack Web Uygulaması
🌐 Teknolojiler: React + Node.js + Express + Çoklu Veritabanı Desteği

================================================================================
                                PROJE ÖZETİ
================================================================================

Bu proje, Excel dosyalarını analiz eden, dönüştüren ve farklı veritabanı 
sistemlerine aktaran kapsamlı bir veri işleme platformudur. Kullanıcılar 
drag & drop ile Excel yükleyebilir, veri analizi yapabilir, dönüştürme 
kuralları uygulayabilir ve sonuçları Excel veya veritabanına kaydedebilir.

================================================================================
                              TEKNİK MİMARİ
================================================================================

🏗️ PROJE YAPISI:
excel-proje/
├── client/                    # Frontend (React)
│   ├── src/
│   │   ├── App.jsx           # ANA UYGULAMA BİLEŞENİ
│   │   ├── main.jsx          # React başlatma dosyası
│   │   ├── index.css         # Global stiller
│   │   └── components/       # UI bileşenleri
│   ├── package.json
│   └── vite.config.js
└── server/                   # Backend (Node.js)
    ├── index.js              # ANA SUNUCU DOSYASI
    ├── logger.js             # Log sistemi
    └── package.json

🔧 TEKNOLOJİ STACKİ:
Frontend: React 18, Vite, Axios, XLSX, React-Dropzone
Backend: Node.js, Express.js, CORS
Veritabanları: MSSQL, PostgreSQL, MySQL, SQLite
Dosya İşleme: XLSX (SheetJS), Multer

================================================================================
                              ANA DOSYALAR VE GÖREVLERİ
================================================================================

📁 CLIENT/SRC/APP.JSX - FRONTEND ANA DOSYA
Görev: React uygulamasının ana bileşeni
Önemli State'ler:
- rows: Excel'den okunan veriler
- columns: Sütun başlıkları
- columnAnalysis: Sütun analizi sonuçları
- columnMappings: Sütun dönüştürme ayarları
- validationRules: Veri doğrulama kuralları
- transformedRows: Dönüştürülmüş veriler

Önemli Fonksiyonlar:
- handleExcelFile(): Excel dosyasını işler
- analyzeColumns(): Sütun analizi yapar
- transformData(): Veri dönüştürme işlemi
- validateData(): Veri doğrulama
- saveToDatabaseAdvanced(): Veritabanına kaydetme
- exportToExcel(): Excel export

📁 SERVER/INDEX.JS - BACKEND ANA DOSYA
Görev: Express sunucusu ve API endpoint'leri
Önemli Endpoint'ler:
- POST /analyze-columns: Sütun analizi
- POST /transform-data: Veri dönüştürme
- POST /export-excel: Excel export
- POST /save: MSSQL kaydetme
- POST /save-pg: PostgreSQL kaydetme
- POST /save-mysql: MySQL kaydetme
- POST /save-sqlite: SQLite kaydetme

Önemli Fonksiyonlar:
- analyzeColumnType(): Sütun tipi analizi
- insertRowsDynamic(): Batch veri kaydetme
- applyTransformation(): Veri dönüştürme

================================================================================
                              ÖZELLİKLER VE KODLARI
================================================================================

1️⃣ EXCEL YÜKLEME VE İŞLEME
Dosya: client/src/App.jsx
Fonksiyon: handleExcelFile()
Teknoloji: XLSX (SheetJS)
Ne Yapar: Excel dosyasını JSON formatına çevirir

Kod Örneği:
```javascript
const handleExcelFile = async (file) => {
  const data = await file.arrayBuffer();
  const wb = XLSX.read(data, { type: "array" });
  const json = XLSX.utils.sheet_to_json(firstSheet);
  setRows(json);
}
```

2️⃣ SÜTUN ANALİZİ
Dosya: client/src/App.jsx + server/index.js
Frontend: analyzeColumns()
Backend: /analyze-columns
Ne Yapar: Her sütunun tipini tahmin eder

Analiz Edilen Özellikler:
- Veri Tipi: string, number, date, boolean
- Güven Oranı: %0-100 arası
- Null Yüzdesi: Boş değer oranı
- Örnek Değerler: İlk 5 değer
- Tip Açıklaması: Türkçe açıklama

3️⃣ VERİ DÖNÜŞTÜRME
Dosya: client/src/App.jsx + server/index.js
Frontend: transformData()
Backend: /transform-data
Ne Yapar: Seçilen kurallara göre veriyi dönüştürür

Dönüştürme Kuralları:
- TRIM: Boşlukları siler
- UPPER: Büyük harf yapar
- LOWER: Küçük harf yapar
- DATE_FORMAT: Tarih formatı
- REGEX_REPLACE: Özel değiştirme
- CONSTANT: Sabit değer atama
- FORMULA: Formül uygulama

4️⃣ VERİ DOĞRULAMA
Dosya: client/src/App.jsx
Fonksiyon: validateData()
Ne Yapar: Veri kalitesini kontrol eder

Doğrulama Kuralları:
- Zorunlu Alan: Boş değer kontrolü
- E-posta Formatı: E-posta format doğrulaması
- Minimum Uzunluk: En az karakter sayısı
- Maksimum Uzunluk: En fazla karakter sayısı
- Regex Pattern: Özel format kontrolü

5️⃣ VERİTABANI KAYDETME
Dosya: client/src/App.jsx + server/index.js
Frontend: saveToDatabaseAdvanced()
Backend: /save, /save-pg, /save-mysql, /save-sqlite
Ne Yapar: Veriyi 4 farklı veritabanına kaydeder

Desteklenen Veritabanları:
- Microsoft SQL Server (MSSQL)
- PostgreSQL
- MySQL
- SQLite

Batch İşleme:
- Varsayılan batch boyutu: 1000
- Kullanıcı ayarlanabilir: 100-10000
- Console'da ilerleme takibi

6️⃣ EXCEL EXPORT
Dosya: client/src/App.jsx + server/index.js
Frontend: exportToExcel()
Backend: /export-excel
Ne Yapar: Dönüştürülmüş veriyi Excel'e aktarır

Özellikler:
- Format koruma
- Profesyonel stiller
- Otomatik sütun genişliği
- Renkli başlıklar

================================================================================
                              KULLANICI ARAYÜZÜ
================================================================================

🎨 TASARIM ÖZELLİKLERİ:
- Dark Theme: Göz yorgunluğunu azaltan koyu tema
- Responsive Design: Tüm cihazlarda uyumlu
- Intuitive Navigation: Sezgisel kullanıcı arayüzü
- Real-time Feedback: Anlık geri bildirimler

🎨 RENK PALETİ:
- Primary: #8b5cf6 (Mor)
- Success: #10b981 (Yeşil)
- Warning: #f59e0b (Turuncu)
- Error: #ef4444 (Kırmızı)
- Background: #121212 (Koyu gri)

📱 ANA BÖLÜMLER:
1. Excel Upload (Drag & Drop)
2. Sütun Analizi
3. Veri Doğrulama Kuralları
4. Sütun Bazlı Ayarlar
5. Hücre Düzenleme
6. Veritabanı Kaydetme
7. Excel Export

================================================================================
                              VERİ AKIŞI
================================================================================

📊 VERİ İŞLEME SÜRECİ:

1. EXCEL UPLOAD
   Excel Dosyası → XLSX Parse → JSON Array → State'e Kaydet

2. SÜTUN ANALİZİ
   JSON Data → Backend'e Gönder → Tip Tahmini → Analiz Sonuçları

3. VERİ DÜZENLEME
   Kullanıcı Seçimleri → State Güncelleme → Önizleme

4. VERİ DÖNÜŞTÜRME
   Seçili Kurallar → Backend'e Gönder → Dönüştürme → Sonuçlar

5. VERİTABANI KAYDETME
   Dönüştürülmüş Veri → Batch İşleme → Veritabanına Kaydet

6. EXCEL EXPORT
   Dönüştürülmüş Veri → XLSX Oluştur → İndirme

================================================================================
                              GÜVENLİK VE PERFORMANS
================================================================================

🔒 GÜVENLİK ÖNLEMLERİ:
- SQL Injection Koruması: Parametrized queries
- File Upload Güvenliği: Dosya tipi kontrolü
- Input Validation: Girdi doğrulama
- Error Handling: Güvenli hata yönetimi

⚠️ GÜVENLİK SORUNLARI:
- Veritabanı şifreleri kodda hardcoded (server/index.js)
- .env dosyası yok
- Hassas bilgiler GitHub'da görünür
- Production'da kullanılamaz

🔧 GÜVENLİK İYİLEŞTİRMELERİ:
1. .env dosyası oluşturulmalı
2. Şifreler environment variable'lara taşınmalı
3. .gitignore'a .env eklenmeli
4. dotenv paketi kurulmalı
5. Production'da güçlü şifreler kullanılmalı

⚡ PERFORMANS OPTİMİZASYONLARI:
- Batch Processing: 1000 satırlık batch'ler
- Lazy Loading: Gerektiğinde yükleme
- Memory Management: Bellek sızıntısı önleme
- Async Operations: Bloklamayan işlemler

📈 PERFORMANS METRİKLERİ:
- Excel Upload: 10MB dosya ~2 saniye
- Sütun Analizi: 1000 satır ~1 saniye
- Veritabanı Kaydetme: 1000 satır ~3 saniye
- Excel Export: 1000 satır ~1 saniye

================================================================================
                              HATA YÖNETİMİ
================================================================================

🐛 YAYGIN SORUNLAR VE ÇÖZÜMLERİ:

1. Backend Bağlantı Hatası
   Sorun: Port 5000 kapalı
   Çözüm: Backend'i başlat, port kontrolü yap

2. Excel Upload Hatası
   Sorun: Desteklenmeyen format
   Çözüm: .xlsx veya .xls formatı kullan

3. Veritabanı Kaydetme Hatası
   Sorun: Bağlantı bilgileri yanlış
   Çözüm: server/index.js dosyasındaki şifreleri kontrol et
   Not: Şu anda .env dosyası yok, şifreler kodda hardcoded

4. Bellek Hatası
   Sorun: Büyük dosyalar
   Çözüm: Batch boyutunu küçült




